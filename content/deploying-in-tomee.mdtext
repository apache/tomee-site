Title:
Notice:    Licensed to the Apache Software Foundation (ASF) under one
           or more contributor license agreements.  See the NOTICE file
           distributed with this work for additional information
           regarding copyright ownership.  The ASF licenses this file
           to you under the Apache License, Version 2.0 (the
           "License"); you may not use this file except in compliance
           with the License.  You may obtain a copy of the License at
           .
             http://www.apache.org/licenses/LICENSE-2.0
           .
           Unless required by applicable law or agreed to in writing,
           software distributed under the License is distributed on an
           "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
           KIND, either express or implied.  See the License for the
           specific language governing permissions and limitations
           under the License.

#Deploying in TomEE

Deploying in TomEE is quite simple. 

You could deploy your application just like how you would deploy with Tomcat. For an example, [tomee-and-eclipse](tomee-and-eclipse.html) shows
how to use TomEE along with Eclipse.

Or you could simply package your application as a war/ear and "drop it in" tomee/webapps folder.

On a related note, read on to learn about packaging EJBs in a WAR.

### Packaging

<a name="CollapsedEAR-Onearchive"></a>
# One archive

The basic idea of this approach is that your Servlets and EJBs are together
in your WAR file as one app.
-No classloader boundries between Servlets and EJBs
-EJBs and Servlets can share all third-party libraries (like Spring\!) -
no EAR required.
-Can put the web.xml and ejb-jar.xml in the same archive (the WAR file).
-EJBs can see Servlet classes and vice versa.

<a name="CollapsedEAR-NotquiteJ2EE(itistrulyJEE6)"></a>
# Not quite J2EE (it is truly JEE6)

This is very different than J2EE or Java EE 5 as there aren't several
levels of separation and classloader hierarchy.  This is going to take some
getting used to and it should be understood that this style of packaging
isn't J2EE compliant. Who would care tough as it is a feature of Java EE 6
we would've been waiting for so long.

 J2EE classloading rules:
-You cannot ever have EJBs and servlets in the same classloader.

-Three classloader minimum; a classloader for the ear, one for each
ejb-jar, and one for each WAR file.

-Servlets can see EJBs, but EJBs cannot see servlets.

 To pull that off, J2EE has to kill you on packaging:
-You cannot have EJB classes and Servlet classes in the same archive.

-You need at least three archives to combine servlets and ejbs; 1 EAR
containing 1 EJB jar and 1 servlet WAR.

-Shared libraries must go in the EAR and be included in a specially
formatted 'Class-Path' entry in the EAR's MANIFEST file.

 Critically speaking, forcing more than one classloader on an application
is where J2EE "jumps the shark" for a large majority of people's needs.

<a name="CollapsedEAR-ExamplewithTomcat"></a>
# Example with Tomcat

If you want to try to work with Servlets/JSP and OpenEJB using Tomcat, see
the [setup page](openejbx30:tomcat.html)
 and the "/webapps/ejb-examples" section of the [openejb-examples.zip|Download]
 available on the download page.
